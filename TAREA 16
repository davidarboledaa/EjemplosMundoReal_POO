import tkinter as tk
from tkinter import ttk, messagebox

class TodoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Lista de Tareas Pendientes")

        self.tasks = []
        self.task_var = tk.StringVar(value=self.tasks)

        self.create_widgets()
        self.bind_keyboard_shortcuts()

    def create_widgets(self):
        # Frame para la entrada de nueva tarea
        input_frame = ttk.Frame(self.root, padding=(10, 10, 10, 0))
        input_frame.grid(row=0, column=0, sticky="ew")

        self.new_task_entry = ttk.Entry(input_frame, width=40)
        self.new_task_entry.grid(row=0, column=0, sticky="ew", padx=(0, 5))
        self.new_task_entry.focus()

        add_button = ttk.Button(input_frame, text="Añadir", command=self.add_task)
        add_button.grid(row=0, column=1, sticky="e")

        input_frame.columnconfigure(0, weight=1)

        # Frame para la lista de tareas y botones de acción
        list_frame = ttk.Frame(self.root, padding=10)
        list_frame.grid(row=1, column=0, sticky="nsew")

        self.task_listbox = tk.Listbox(list_frame, listvariable=self.task_var, selectmode=tk.SINGLE)
        self.task_listbox.grid(row=0, column=0, sticky="nsew", pady=(0, 5))

        scrollbar = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.task_listbox.yview)
        self.task_listbox.config(yscrollcommand=scrollbar.set)
        scrollbar.grid(row=0, column=1, sticky="ns", pady=(0, 5))

        action_frame = ttk.Frame(list_frame)
        action_frame.grid(row=1, column=0, columnspan=2, sticky="ew")

        complete_button = ttk.Button(action_frame, text="Completar", command=self.mark_complete)
        complete_button.pack(side=tk.LEFT, padx=5)

        delete_button = ttk.Button(action_frame, text="Eliminar", command=self.delete_task)
        delete_button.pack(side=tk.LEFT, padx=5)

        list_frame.columnconfigure(0, weight=1)
        list_frame.rowconfigure(0, weight=1)
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(1, weight=1)

    def bind_keyboard_shortcuts(self):
        self.new_task_entry.bind("<Return>", lambda event: self.add_task())
        self.root.bind("<Escape>", lambda event: self.root.destroy())
        self.root.bind("c", lambda event: self.mark_complete())
        self.root.bind("<Delete>", lambda event: self.delete_task())
        self.root.bind("d", lambda event: self.delete_task()) # Atajo alternativo para eliminar

    def add_task(self):
        new_task = self.new_task_entry.get().strip()
        if new_task:
            self.tasks.append({"text": new_task, "complete": False})
            self.update_task_list()
            self.new_task_entry.delete(0, tk.END)

    def mark_complete(self):
        selected_index = self.task_listbox.curselection()
        if selected_index:
            index = int(selected_index[0])
            self.tasks[index]["complete"] = not self.tasks[index]["complete"]
            self.update_task_list()

    def delete_task(self):
        selected_index = self.task_listbox.curselection()
        if selected_index:
            index = int(selected_index[0])
            del self.tasks[index]
            self.update_task_list()

    def update_task_list(self):
        self.task_var.set([
            f"[✔] {task['text']}" if task["complete"] else f"[ ] {task['text']}"
            for task in self.tasks
        ])
        # Actualizar el color de los elementos de la lista para feedback visual
        for i, task in enumerate(self.tasks):
            if task["complete"]:
                self.task_listbox.itemconfig(i, fg="gray")
            else:
                self.task_listbox.itemconfig(i, fg="black")

if __name__ == "__main__":
    root = tk.Tk()
    app = TodoApp(root)
    root.mainloop()
    Explicación del Código:

Importaciones: Importamos los módulos tkinter y tkinter.ttk para la interfaz gráfica, y tkinter.messagebox (aunque no se usa explícitamente en esta versión básica, podría ser útil para mensajes).

Establecemos el título de la ventana.
Creamos una lista vacía self.tasks para almacenar las tareas (cada tarea es un diccionario con text y complete estados).
Creamos una variable de control tk.StringVar llamada self.task_var que se utilizará para actualizar el contenido del Listbox.
Llamamos a self.create_widgets() para construir la interfaz.
Llamamos a self.bind_keyboard_shortcuts() para configurar los atajos de teclado.
create_widgets(self):

Creamos un Frame (input_frame) para contener el campo de entrada y el botón "Añadir".
Creamos un ttk.Entry (self.new_task_entry) para que el usuario escriba nuevas tareas.
Creamos un botón ttk.Button con el texto "Añadir" y lo asocia a la función self.add_task.
Creamos otro Frame (list_frame) para la lista de tareas y los botones de acción.
Creamos un tk.Listbox (self.task_listbox) que muestra las tareas. Se vincula a self.task_var para actualizarse automáticamente.
Añadimos una ttk.Scrollbar para la lista en caso de que haya muchas tareas.
Creamos un Frame (action_frame) para los botones "Completar" y "Eliminar".
Creamos los botones "Completar" y "Eliminar" y los asocia a las funciones self.mark_complete y self.delete_task respectivamente.
Configuramos el comportamiento de redimensionamiento de las filas y columnas para que los widgets se expandan correctamente cuando se redimensiona la ventana.
bind_keyboard_shortcuts(self):

Utilizamos el método bind() de la ventana principal y el campo de entrada para asociar eventos de teclado a funciones:
<Return> en self.new_task_entry llama a self.add_task().
<Escape> en la ventana principal destruye la aplicación.
c en la ventana principal llama a self.mark_complete().
<Delete> y d en la ventana principal llaman a self.delete_task().
add_task(self):

Obtenemos el texto del campo de entrada, elimina los espacios en blanco al principio y al final.
Si el texto no está vacío, crea un diccionario con el texto de la tarea y su estado (inicialmente False para "pendiente").
Agrega el diccionario a la lista self.tasks.
Llama a self.update_task_list() para actualizar la visualización.
Limpia el campo de entrada.
mark_complete(self):

Obtenemos el índice de la tarea seleccionada en el Listbox.
Si hay una tarea seleccionada, cambia el valor de la clave "complete" en el diccionario de esa tarea.
Llama a self.update_task_list() para reflejar el cambio en la interfaz.
delete_task(self):

Obtenemos el índice de la tarea seleccionada en el Listbox.
Si hay una tarea seleccionada, elimina la tarea de la lista self.tasks utilizando el índice.
Llama a self.update_task_list() para actualizar la lista mostrada.
update_task_list(self):

Creamos una nueva lista de strings para mostrar en el Listbox. Cada string incluye "[✔]" si la tarea está completa y "[ ]" si está pendiente.
Actualizamos la variable self.task_var con esta nueva lista de strings. Esto hace que el Listbox se actualice automáticamente.
Itera a través de los elementos del Listbox y cambia el color del texto a gris si la tarea está completa y a negro si está pendiente, proporcionando feedback visual.
Bloque if __name__ == "__main__"::

Crea la ventana principal de Tkinter (root).
Crea una instancia de la clase TodoApp.
Iniciamos el bucle principal de Tkinter (root.mainloop()), que mantiene la ventana abierta y responde a los eventos del usuario.
